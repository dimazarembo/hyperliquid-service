package com.dzarembo.hyperliquidservice.clinet;

import com.dzarembo.hyperliquidservice.model.FundingRate;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
@Slf4j
public class HyperliquidApiClient {

    private final WebClient webClient = WebClient.create("https://api.hyperliquid.xyz");

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ funding rates –∏–∑ Hyperliquid (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å).
     * –í—Ä–µ–º—è nextFundingTime –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ UTC, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ú–∏–Ω—Å–∫–∞ (UTC+3)
     * –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ.
     */
    public List<FundingRate> fetchFundingRates() {
        try {
            log.info("üîÑ Fetching funding rates from Hyperliquid (predictedFundings)...");

            Map<String, Object> body = Map.of("type", "predictedFundings");

            Object[] response = webClient.post()
                    .uri("/info")
                    .header("Content-Type", "application/json")
                    .bodyValue(body)
                    .retrieve()
                    .bodyToMono(Object[].class)
                    .onErrorResume(WebClientResponseException.class, e -> {
                        log.error("‚ùå Hyperliquid API error: {}", e.getMessage());
                        return Mono.empty();
                    })
                    .block();

            if (response == null) {
                log.warn("‚ö†Ô∏è Empty response from Hyperliquid predictedFundings");
                return List.of();
            }

            List<FundingRate> result = new ArrayList<>();

            for (Object coinObj : response) {
                if (!(coinObj instanceof List<?> coinBlock) || coinBlock.size() < 2)
                    continue;

                String symbol = (String) coinBlock.get(0);
                List<?> exchanges = (List<?>) coinBlock.get(1);

                for (Object ex : exchanges) {
                    if (!(ex instanceof List<?> exBlock) || exBlock.size() < 2)
                        continue;

                    String exchangeName = (String) exBlock.get(0);
                    Map<String, Object> data = (Map<String, Object>) exBlock.get(1);

                    // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–æ–∫ Hyperliquid Perpetual
                    if (!"HlPerp".equals(exchangeName))
                        continue;

                    try {
                        double rate = Double.parseDouble(data.get("fundingRate").toString());

                        // üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ funding = 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É. –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–∫–∏–µ –ø–∞—Ä—ã –Ω–∞ —Å–∞–º–æ–π –±–∏—Ä–∂–µ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã
                        //—Ç–æ–ª—å–∫–æ –ø–æ api –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç
                        if (rate == 0.0d) {
                            log.debug("‚è≠Ô∏è Skipping {} (inactive pair, funding=0)", symbol);
                            continue;
                        }

                        int interval = ((Number) data.getOrDefault("fundingIntervalHours", 1)).intValue();
                        long nextFundingTime = ((Number) data.get("nextFundingTime")).longValue();

                        //–¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —á–∞—Å —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –≤ utc –ø–æ—á–µ–º—É-—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Ç.–µ. –µ—Å–ª–∏ —Å–µ–π—á–∞—Å 12 30 —Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤—Ä–µ–º—è
                        //–≤—Ä–µ–º—è 12 00 (9—é—Ç—Å –∏–ª–∏ 12—é—Ç—Å+3) –∞ –Ω–µ 13 00, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–Ω–¥–∏–Ω–≥ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –≤—Ä—É—á–Ω—É—é —á–∞—Å
                        // –∏ —Ç–æ–≥–¥–∞ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ –≤—Å–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –∏ —É –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂
                        nextFundingTime += 3600_000L;

                        FundingRate fundingRate = new FundingRate(
                                normalizeSymbol(symbol),
                                rate,              // —ç—Ç–æ —É–∂–µ –ø–æ—á–∞—Å–æ–≤–æ–π rate, –¥–µ–ª–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
                                nextFundingTime,   // API –æ—Ç–¥–∞—ë—Ç UTC, –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                                interval           // –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ 1
                        );

                        result.add(fundingRate);

                    } catch (Exception parseEx) {
                        log.warn("‚ö†Ô∏è Failed to parse HL item for {}: {}", symbol, parseEx.getMessage());
                    }
                }
            }

            log.info("‚úÖ Parsed {} hourly funding pairs from Hyperliquid", result.size());
            return result;

        } catch (Exception e) {
            log.error("üí• Failed to fetch Hyperliquid funding rates", e);
            return List.of();
        }
    }

    /**
     * –ü—Ä–∏–≤–æ–¥–∏–º –∏–º—è —Å–∏–º–≤–æ–ª–∞ –∫ –≤–∏–¥—É BTCUSDT, MEGAUSDT –∏ —Ç.–ø.
     */
    private String normalizeSymbol(String name) {
        name = name.toUpperCase();
        if (!name.endsWith("USDT") && !name.endsWith("USD") && !name.endsWith("USDC")) {
            name += "USDT";
        }
        return name;
    }
}